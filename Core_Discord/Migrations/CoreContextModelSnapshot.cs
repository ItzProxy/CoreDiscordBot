// <auto-generated />
using Core_Discord.CoreDatabase;
using Core_Discord.CoreDatabase.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Core_Discord.Migrations
{
    [DbContext(typeof(CoreContext))]
    partial class CoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core_Discord.CoreDatabase.Models.BotConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("BufferSize");

                    b.Property<int>("CurrencyDropAmount");

                    b.Property<float>("CurrencyGenerationChance");

                    b.Property<int>("CurrencyGenerationCooldown");

                    b.Property<string>("CurrencyIcon");

                    b.Property<int?>("CurrencyMaxDropAmount");

                    b.Property<string>("CurrencyName");

                    b.Property<string>("CurrencyPlural");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<string>("DefaultPrefix");

                    b.Property<int>("ExpMinutesTimeout")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(5);

                    b.Property<int>("ExpPerMessage")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(3);

                    b.Property<bool>("ForwardMessages");

                    b.Property<int>("PermissionVersion");

                    b.Property<bool>("RotateStatus");

                    b.HasKey("Id");

                    b.ToTable("BotConfig");
                });

            modelBuilder.Entity("Core_Discord.CoreDatabase.Models.DiscordUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AvatarId");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<string>("Discriminator");

                    b.Property<DateTime>("LastLevelUp")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2017, 11, 13, 0, 0, 0, 0, DateTimeKind.Local));

                    b.Property<DateTime>("LastXpGain");

                    b.Property<int>("NotifyOnLevelUp");

                    b.Property<int>("TotalXp");

                    b.Property<long>("UserId");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserId");

                    b.ToTable("DiscordUser");
                });

            modelBuilder.Entity("Core_Discord.CoreDatabase.Models.ExpSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateAdded");

                    b.Property<bool>("ExpRoleRewardExclusive");

                    b.Property<int>("GuildConfigId");

                    b.Property<string>("NotifyMessage");

                    b.Property<bool>("ServerExcluded");

                    b.HasKey("Id");

                    b.HasIndex("GuildConfigId")
                        .IsUnique();

                    b.ToTable("ExpSettings");
                });

            modelBuilder.Entity("Core_Discord.CoreDatabase.Models.GuildConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AutoAssignRoleId");

                    b.Property<bool>("AutoDcFromVc");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<string>("Locale");

                    b.Property<string>("Prefix");

                    b.Property<long>("ServerId");

                    b.Property<string>("TimeZoneId");

                    b.HasKey("Id");

                    b.HasIndex("ServerId")
                        .IsUnique();

                    b.ToTable("ServerConfig");
                });

            modelBuilder.Entity("Core_Discord.CoreDatabase.Models.LoadedPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BotConfigId");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BotConfigId");

                    b.ToTable("LoadedPackages");
                });

            modelBuilder.Entity("Core_Discord.CoreDatabase.Models.PlayingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BotConfigId");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("BotConfigId");

                    b.ToTable("PlayingStatus");
                });

            modelBuilder.Entity("Core_Discord.CoreDatabase.Models.PlaylistSong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateAdded");

                    b.Property<int?>("PlaylistUserId");

                    b.Property<string>("Provider");

                    b.Property<int>("ProviderType");

                    b.Property<string>("Query");

                    b.Property<string>("Title");

                    b.Property<string>("Uri");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistUserId");

                    b.ToTable("PlaylistSong");
                });

            modelBuilder.Entity("Core_Discord.CoreDatabase.Models.PlaylistUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<long>("AuthorId");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PlaylistUser");
                });

            modelBuilder.Entity("Core_Discord.CoreDatabase.Models.UserExpStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AwardedExp");

                    b.Property<DateTime?>("DateAdded");

                    b.Property<int>("Exp");

                    b.Property<long>("GuildId");

                    b.Property<DateTime>("LastLevelUp");

                    b.Property<int>("NotifyOnLevelUp");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserExpStats");
                });

            modelBuilder.Entity("Core_Discord.CoreDatabase.Models.ExpSettings", b =>
                {
                    b.HasOne("Core_Discord.CoreDatabase.Models.GuildConfig", "GuildConfig")
                        .WithOne("ExpSettings")
                        .HasForeignKey("Core_Discord.CoreDatabase.Models.ExpSettings", "GuildConfigId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core_Discord.CoreDatabase.Models.LoadedPackage", b =>
                {
                    b.HasOne("Core_Discord.CoreDatabase.Models.BotConfig")
                        .WithMany("LoadedPackages")
                        .HasForeignKey("BotConfigId");
                });

            modelBuilder.Entity("Core_Discord.CoreDatabase.Models.PlayingStatus", b =>
                {
                    b.HasOne("Core_Discord.CoreDatabase.Models.BotConfig")
                        .WithMany("RotatingPlayStatus")
                        .HasForeignKey("BotConfigId");
                });

            modelBuilder.Entity("Core_Discord.CoreDatabase.Models.PlaylistSong", b =>
                {
                    b.HasOne("Core_Discord.CoreDatabase.Models.PlaylistUser")
                        .WithMany("Songs")
                        .HasForeignKey("PlaylistUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
